<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dipesh's App</title>
  <style>
    /* Base styles */
    :root {
      --background: #ffffff;
      --foreground: #0d0d11;
      --muted: #f5f5f6;
      --muted-foreground: #717179;
      --primary: #3b82f6;
      --primary-foreground: #ffffff;
      --card: #ffffff;
      --card-foreground: #0d0d11;
      --border: #e4e4e7;
      --input: #e4e4e7;
      --ring: #0d0d11;
      --radius: 0.5rem;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Raleway', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    body {
      background-color: var(--background);
      color: var(--foreground);
      min-height: 100vh;
      overflow-x: hidden;
    }

    .app-container {
      position: relative;
      width: 100%;
      height: 100vh;
      overflow: hidden;
    }

    /* Animated background */
    .background-canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 0;
      opacity: 0.6;
    }

    /* Header */
    .header {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      padding: 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 20;
    }

    .logo {
      font-size: 1.5rem;
      font-weight: bold;
      background: linear-gradient(135deg, var(--primary), #9333ea);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
    }

    .header-controls {
      display: flex;
      align-items: center;
    }

    .btn {
      background: none;
      border: none;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s ease;
    }

    .refresh-btn {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(4px);
      color: var(--primary);
    }

    .refresh-btn:hover {
      background-color: rgba(255, 255, 255, 0.2);
      transform: rotate(15deg);
    }

    /* Quote Card */
    .quote-container {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      width: 100%;
      padding: 1rem;
    }

    .quote-card {
      width: 100%;
      max-width: 24rem;
      border-radius: 1rem;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      backdrop-filter: blur(8px);
      background-color: rgba(0, 0, 0, 0.2);
      padding: 1.5rem;
      transform-style: preserve-3d;
      transition: transform 0.3s ease;
      z-index: 10;
      overflow: hidden;
      position: relative;
    }

    .quote-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-position: center;
      background-size: cover;
      z-index: -1;
      filter: brightness(0.5);
    }

    .quote-content {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .quote-divider {
      width: 3rem;
      height: 0.25rem;
      background-color: rgba(255, 255, 255, 0.3);
      border-radius: 1rem;
      margin: 0 auto 1rem;
    }

    .quote-text {
      font-size: 1.5rem;
      line-height: 1.4;
      font-weight: 300;
      text-align: center;
      color: white;
      margin-bottom: 0.5rem;
    }

    .quote-author {
      font-size: 1.125rem;
      text-align: center;
      color: rgba(255, 255, 255, 0.7);
      margin-top: 1rem;
    }

    .quote-actions {
      display: flex;
      justify-content: center;
      gap: 1.5rem;
      margin-top: 1.5rem;
    }

    .action-btn {
      color: rgba(255, 255, 255, 0.7);
      transition: all 0.2s ease;
    }

    .action-btn:hover {
      color: white;
      transform: scale(1.1);
    }

    #like-btn:hover {
      color: #f87171;
    }

    #share-btn:hover {
      color: #60a5fa;
    }

    #speak-btn:hover {
      color: #fbbf24;
    }

    /* Overlay */
    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 30;
      backdrop-filter: blur(4px);
    }

    .overlay-content {
      background-color: var(--background);
      border-radius: var(--radius);
      padding: 2rem;
      width: 90%;
      max-width: 30rem;
      text-align: center;
    }

    .share-buttons {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
      margin: 1.5rem 0;
    }

    .share-btn {
      padding: 0.75rem 1.5rem;
      border-radius: var(--radius);
      border: none;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .twitter-btn {
      background-color: #1da1f2;
      color: white;
    }

    .facebook-btn {
      background-color: #3b5998;
      color: white;
    }

    .copy-btn {
      background-color: var(--muted);
      color: var(--foreground);
    }

    .close-btn {
      padding: 0.75rem 1.5rem;
      border-radius: var(--radius);
      border: none;
      background-color: var(--primary);
      color: white;
      font-weight: 600;
      cursor: pointer;
    }

    /* Toast */
    .toast {
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      background-color: var(--background);
      border-radius: var(--radius);
      padding: 1rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      z-index: 100;
      max-width: 20rem;
      transition: all 0.3s ease;
      transform: translateY(100%);
    }

    .toast.visible {
      transform: translateY(0);
    }

    .toast-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }

    .toast-description {
      color: var(--muted-foreground);
      font-size: 0.875rem;
    }

    .hidden {
      display: none;
    }

    /* Animations */
    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }

    @keyframes pulse {
      0% {
        opacity: 0.6;
      }
      50% {
        opacity: 0.8;
      }
      100% {
        opacity: 0.6;
      }
    }

    .pulse {
      animation: pulse 2s infinite;
    }
  </style>
  <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@300;400;500;600&display=swap" rel="stylesheet">
</head>
<body>
  <div class="app-container">
    <!-- Animated Background -->
    <canvas id="background-canvas" class="background-canvas"></canvas>
    
    <!-- Header -->
    <header class="header">
      <div class="logo">Dipesh's App</div>
      <div class="header-controls">
        <button id="refresh-btn" class="btn refresh-btn" aria-label="Refresh quotes">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M3 21v-5h5"></path></svg>
        </button>
      </div>
    </header>
    
    <!-- Quote Card -->
    <div class="quote-container">
      <div id="quote-card" class="quote-card">
        <div class="quote-content">
          <div class="quote-divider"></div>
          <p id="quote-text" class="quote-text">"The best way to predict the future is to create it."</p>
          <p id="quote-author" class="quote-author">Abraham Lincoln</p>
          <div class="quote-actions">
            <button id="like-btn" class="btn action-btn" aria-label="Save to favorites">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-heart"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path></svg>
            </button>
            <button id="share-btn" class="btn action-btn" aria-label="Share quote">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-share-2"><circle cx="18" cy="5" r="3"></circle><circle cx="6" cy="12" r="3"></circle><circle cx="18" cy="19" r="3"></circle><line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line><line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line></svg>
            </button>
            <button id="speak-btn" class="btn action-btn" aria-label="Listen to quote">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-2"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path><path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path></svg>
            </button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Share Overlay (initially hidden) -->
    <div id="share-overlay" class="overlay hidden">
      <div class="overlay-content">
        <h2>Share This Quote</h2>
        <p id="share-quote-text"></p>
        <p id="share-quote-author"></p>
        <div class="share-buttons">
          <button class="share-btn twitter-btn">Twitter</button>
          <button class="share-btn facebook-btn">Facebook</button>
          <button class="share-btn copy-btn">Copy Link</button>
        </div>
        <button id="close-share-btn" class="btn close-btn">Close</button>
      </div>
    </div>
    
    <!-- Toast notification (initially hidden) -->
    <div id="toast" class="toast hidden">
      <div class="toast-content">
        <div class="toast-title"></div>
        <div class="toast-description"></div>
      </div>
    </div>
  </div>

  <script>
    // Elements
    const quoteCard = document.getElementById('quote-card');
    const quoteText = document.getElementById('quote-text');
    const quoteAuthor = document.getElementById('quote-author');
    const refreshBtn = document.getElementById('refresh-btn');
    const likeBtn = document.getElementById('like-btn');
    const shareBtn = document.getElementById('share-btn');
    const speakBtn = document.getElementById('speak-btn');
    const shareOverlay = document.getElementById('share-overlay');
    const closeShareBtn = document.getElementById('close-share-btn');
    const shareQuoteText = document.getElementById('share-quote-text');
    const shareQuoteAuthor = document.getElementById('share-quote-author');
    const toast = document.getElementById('toast');
    const toastTitle = document.querySelector('.toast-title');
    const toastDescription = document.querySelector('.toast-description');
    const canvas = document.getElementById('background-canvas');

    // State
    let currentQuote = {
      text: "The best way to predict the future is to create it.",
      author: "Abraham Lincoln",
      id: 1
    };
    let isSpeaking = false;
    let utterance = null;

    // Background canvas setup
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Define particle class
    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 5 + 1;
        this.speedX = Math.random() * 2 - 1;
        this.speedY = Math.random() * 2 - 1;
        this.color = `hsla(${Math.random() * 60 + 220}, 70%, 50%, 0.3)`;
      }
      
      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        
        // Bounce off walls
        if (this.x > canvas.width || this.x < 0) {
          this.speedX *= -1;
        }
        
        if (this.y > canvas.height || this.y < 0) {
          this.speedY *= -1;
        }
      }
      
      draw() {
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    // Create particles
    const particles = [];
    function initParticles() {
      for (let i = 0; i < 50; i++) {
        particles.push(new Particle());
      }
    }

    // Animate particles
    function animateParticles() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      for (let i = 0; i < particles.length; i++) {
        particles[i].update();
        particles[i].draw();
        
        // Draw lines between particles
        for (let j = i; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 100) {
            ctx.beginPath();
            ctx.strokeStyle = `rgba(100, 150, 255, ${0.2 - distance/500})`;
            ctx.lineWidth = 1;
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.stroke();
          }
        }
      }
      
      requestAnimationFrame(animateParticles);
    }

    // Parallax effect for quote card
    let mouseX = 0, mouseY = 0;
    document.addEventListener('mousemove', (e) => {
      mouseX = e.clientX / window.innerWidth - 0.5;
      mouseY = e.clientY / window.innerHeight - 0.5;
      
      quoteCard.style.transform = `perspective(1000px) rotateY(${mouseX * 10}deg) rotateX(${-mouseY * 10}deg) translateZ(20px)`;
    });

    quoteCard.addEventListener('mouseleave', () => {
      quoteCard.style.transform = 'perspective(1000px) rotateY(0deg) rotateX(0deg) translateZ(0px)';
    });

    // Fetch a random quote
    async function fetchRandomQuote() {
      try {
        const response = await fetch('https://api.quotable.io/random');
        if (!response.ok) {
          throw new Error('Failed to fetch quote');
        }
        const data = await response.json();
        return {
          text: data.content,
          author: data.author,
          id: data._id
        };
      } catch (error) {
        console.error('Error fetching quote:', error);
        showToast('Error', 'Could not load a new quote. Using fallback quote.');
        
        // Return a fallback quote if API fails
        return {
          text: "The only way to do great work is to love what you do.",
          author: "Steve Jobs",
          id: Math.floor(Math.random() * 1000)
        };
      }
    }

    // Update the quote display
    function displayQuote(quote) {
      quoteText.textContent = `"${quote.text}"`;
      quoteAuthor.textContent = quote.author;
      currentQuote = quote;
      
      // Set a random background image
      const imageIndex = Math.floor(Math.random() * backgroundImages.length);
      quoteCard.style.backgroundImage = `url(${backgroundImages[imageIndex]})`;
      quoteCard.style.backgroundSize = 'cover';
      quoteCard.style.backgroundPosition = 'center';
    }

    // Background images collection
    const backgroundImages = [
      'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-1.2.1&auto=format&fit=crop&w=1200&h=1800',
      'https://images.unsplash.com/photo-1519681393784-d120267933ba?ixlib=rb-1.2.1&auto=format&fit=crop&w=1200&h=1800',
      'https://images.unsplash.com/photo-1540979388789-6cee28a1cdc9?ixlib=rb-1.2.1&auto=format&fit=crop&w=1200&h=1800',
      'https://images.unsplash.com/photo-1550684376-efcbd6e3f031?ixlib=rb-1.2.1&auto=format&fit=crop&w=1200&h=1800',
      'https://images.unsplash.com/photo-1603366615917-1fa6dad5c4fa?ixlib=rb-1.2.1&auto=format&fit=crop&w=1200&h=1800',
      'https://images.unsplash.com/photo-1579546929518-9e396f3cc809?ixlib=rb-1.2.1&auto=format&fit=crop&w=1200&h=1800',
    ];

    // Speech synthesis for narration
    function speakQuote(text) {
      if (!('speechSynthesis' in window)) {
        showToast('Speech Not Supported', 'Your browser does not support voice narration.');
        return;
      }
      
      try {
        // Stop any ongoing speech
        window.speechSynthesis.cancel();
        isSpeaking = false;
        
        // Create new utterance
        utterance = new SpeechSynthesisUtterance(text);
        
        // Configure voice parameters
        const voices = window.speechSynthesis.getVoices();
        const englishVoice = voices.find(voice => 
          voice.lang.includes('en') && !voice.localService
        ) || voices[0];
        
        if (englishVoice) {
          utterance.voice = englishVoice;
        }
        
        utterance.rate = 1;
        utterance.pitch = 1;
        utterance.volume = 1;
        
        // Add event handlers
        utterance.onstart = () => {
          isSpeaking = true;
          speakBtn.style.color = '#fbbf24'; // Highlight button while speaking
        };
        
        utterance.onend = () => {
          isSpeaking = false;
          speakBtn.style.color = '';
        };
        
        utterance.onerror = (event) => {
          isSpeaking = false;
          speakBtn.style.color = '';
          showToast('Speech Error', 'An error occurred during voice narration.');
        };
        
        // Start speaking
        window.speechSynthesis.speak(utterance);
        showToast('Playing Voice', 'Narrating the quote for you...');
      } catch (error) {
        console.error('Speech synthesis error:', error);
        showToast('Speech Error', 'Failed to start voice narration.');
      }
    }

    // Show toast notification
    function showToast(title, description, duration = 3000) {
      toastTitle.textContent = title;
      toastDescription.textContent = description;
      
      toast.classList.remove('hidden');
      toast.classList.add('visible');
      
      setTimeout(() => {
        toast.classList.remove('visible');
        setTimeout(() => {
          toast.classList.add('hidden');
        }, 300);
      }, duration);
    }

    // Show share overlay
    function showShareOverlay() {
      shareQuoteText.textContent = `"${currentQuote.text}"`;
      shareQuoteAuthor.textContent = currentQuote.author;
      shareOverlay.classList.remove('hidden');
    }

    // Handle like/favorite action
    function handleLike() {
      showToast('Quote Saved', 'This quote has been added to your favorites.');
      likeBtn.style.color = '#f87171';
      setTimeout(() => {
        likeBtn.style.color = '';
      }, 1000);
    }

    // Event listeners
    refreshBtn.addEventListener('click', async () => {
      // Show loading state
      quoteText.textContent = 'Loading...';
      quoteText.classList.add('pulse');
      quoteAuthor.textContent = '';
      
      // Fetch new quote
      const newQuote = await fetchRandomQuote();
      
      // Remove loading state
      quoteText.classList.remove('pulse');
      
      // Display the new quote
      displayQuote(newQuote);
      
      // Visual feedback
      refreshBtn.style.transform = 'rotate(360deg)';
      setTimeout(() => {
        refreshBtn.style.transform = '';
      }, 500);
      
      showToast('Quote Refreshed', 'Showing a new inspirational quote.');
    });

    likeBtn.addEventListener('click', handleLike);

    shareBtn.addEventListener('click', showShareOverlay);

    closeShareBtn.addEventListener('click', () => {
      shareOverlay.classList.add('hidden');
    });

    speakBtn.addEventListener('click', () => {
      if (isSpeaking) {
        window.speechSynthesis.cancel();
        isSpeaking = false;
        speakBtn.style.color = '';
        showToast('Speech Stopped', 'Voice narration has been stopped.');
      } else {
        speakQuote(`${currentQuote.text} by ${currentQuote.author}`);
      }
    });

    document.querySelector('.twitter-btn').addEventListener('click', () => {
      const tweetText = encodeURIComponent(`"${currentQuote.text}" - ${currentQuote.author}`);
      window.open(`https://twitter.com/intent/tweet?text=${tweetText}`, '_blank');
    });

    document.querySelector('.facebook-btn').addEventListener('click', () => {
      const fbText = encodeURIComponent(`"${currentQuote.text}" - ${currentQuote.author}`);
      window.open(`https://www.facebook.com/sharer/sharer.php?u=${window.location.href}&quote=${fbText}`, '_blank');
    });

    document.querySelector('.copy-btn').addEventListener('click', () => {
      const textToCopy = `"${currentQuote.text}" - ${currentQuote.author}`;
      navigator.clipboard.writeText(textToCopy).then(() => {
        showToast('Copied', 'Quote copied to clipboard!');
      }).catch(err => {
        showToast('Error', 'Failed to copy quote to clipboard.');
      });
    });

    // Handle window resize
    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });

    // Initialize on load
    window.addEventListener('load', async () => {
      initParticles();
      animateParticles();
      
      // Voice synthesis initialization
      if ('speechSynthesis' in window) {
        window.speechSynthesis.cancel();
        // Some browsers need this hack to load voices
        window.speechSynthesis.getVoices();
      }
      
      // Load initial quote
      const initialQuote = await fetchRandomQuote();
      displayQuote(initialQuote);
    });
  </script>
</body>
</html>
